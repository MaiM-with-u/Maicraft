# -*- coding: utf-8 -*-
# Generated by MaiAgent after successful task execution

import asyncio

async def digDownToY50WithTorches(bot):
    # 获取当前位置
    pos = await bot.position
    current_y = int(pos.y)
    target_y = 50

    # 如果已经到达或低于目标层，直接完成
    if current_y <= target_y:
        await bot.chat(f"已在Y={current_y}，低于目标Y=50，任务完成。")
        return True

    # 检查并补充火把
    inventory = await bot.inventory
    torch_count = sum(item.count for item in inventory if item.name == "torch")
    coal_count = sum(item.count for item in inventory if item.name == "coal")
    stick_count = sum(item.count for item in inventory if item.name == "stick")
    log_count = sum(item.count for item in inventory if "log" in item.name)
    planks_count = sum(item.count for item in inventory if "planks" in item.name)

    # 若火把不足，尝试合成
    if torch_count < 8:
        # 若无木棍，尝试制作
        if stick_count == 0:
            # 若无木板，尝试用原木合成
            if planks_count == 0 and log_count > 0:
                crafted, res = await bot.craft_item("oak_planks", 4)
                if not crafted:
                    await bot.chat("无法合成木板，请检查工作台。")
                    return False
                planks_count += 4
                await bot.chat("已合成4个橡木板。")

            # 用木板合成木棍（每2木板出4木棍）
            if planks_count >= 2:
                crafted, res = await bot.craft_item("stick", 4)
                if not crafted:
                    await bot.chat("无法合成木棍。")
                    return False
                stick_count += 4
                await bot.chat("已合成4个木棍。")
            else:
                await bot.chat("木板不足，无法合成木棍。")
                return False

        # 使用煤炭和木棍合成火把（每1煤+1棍出4火把）
        if coal_count > 0 and stick_count >= 1:
            torch_to_make = min(8 - torch_count, coal_count, stick_count)
            crafted, res = await bot.craft_item("torch", torch_to_make)
            if crafted:
                torch_count += torch_to_make
                await bot.chat(f"已合成 {torch_to_make} 个火把。")
            else:
                await bot.chat("火把合成失败。")
                return False
        else:
            await bot.chat("缺少煤炭或木棍，无法合成火把。")
            return False

    # 开始向下挖掘
    torch_placed_heights = set()
    horizontal_dirs = [(1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, -1)]  # 四个水平方向
    last_y = current_y

    while current_y > target_y:
        # 确保头顶有空间（Y+1 是空气）
        head_block = await bot.get_block(pos.x, pos.y + 1, pos.z)
        if head_block and head_block.block_type != "air":
            success, placed = await bot.mine_block(pos.x, pos.y + 1, pos.z, digOnly=False)
            if not success:
                await bot.chat("无法清理头顶空间，停止挖掘。")
                return False

        # 获取脚下要挖掘的方块
        feet_y = pos.y - 1
        feet_block = await bot.get_block(pos.x, feet_y, pos.z)
        if not feet_block or feet_block.block_type == "air":
            await bot.chat(f"脚下方块为空或空气，无法继续挖掘，当前位置Y={current_y}。")
            return False

        # 挖掘脚下方块
        success, has_block = await bot.mine_block(pos.x, feet_y, pos.z, digOnly=False)
        if not success:
            await bot.chat(f"挖掘脚下 ({pos.x}, {feet_y}, {pos.z}) 失败。")
            return False

        # 尝试下落一格
        success, new_pos, dist = await bot.move(pos.x, pos.y - 1, pos.z)
        if not success:
            await bot.chat("无法下落，可能路径阻塞。")
            return False

        # 更新位置
        pos = new_pos
        current_y = int(pos.y)

        # 判断是否需要放置火把：从Y=64开始，每下降2格放置一次
        if current_y <= 64 and (64 - current_y) % 2 == 0:
            if current_y not in torch_placed_heights:
                placed = False
                # 优先在侧面墙壁上方放置火把
                for dx, dy, dz in horizontal_dirs:
                    side_x, side_y, side_z = pos.x + dx, pos.y, pos.z + dz
                    side_block = await bot.get_block(side_x, side_y, side_z)
                    if side_block and side_block.block_type != "air":
                        top_x, top_y, top_z = side_x, side_y + 1, side_z
                        block_above = await bot.get_block(top_x, top_y, top_z)
                        if not block_above or block_above.block_type == "air":
                            success, placed = await bot.place_block("torch", top_x, top_y, top_z)
                            if success:
                                torch_placed_heights.add(current_y)
                                await bot.chat(f"在 ({top_x}, {top_y}, {top_z}) 放置火把，高度Y={current_y}。")
                                break
                # 若侧面不可行，尝试头顶
                if not placed:
                    head_x, head_y, head_z = pos.x, pos.y + 1, pos.z
                    block_above = await bot.get_block(head_x, head_y, head_z)
                    if not block_above or block_above.block_type == "air":
                        success, placed = await bot.place_block("torch", head_x, head_y, head_z)
                        if success:
                            torch_placed_heights.add(current_y)
                            await bot.chat(f"在头顶 ({head_x}, {head_y}, {head_z}) 放置火把，高度Y={current_y}。")

        # 小延迟避免操作过快
        await asyncio.sleep(0.5)

    # 到达目标区域
    if current_y <= target_y:
        await bot.chat(f"成功抵达Y={current_y}。")

        # 验证照明：Y=50~64 每两格应有火把（Y=64,62,60,58,56,54,52,50）
        required_levels = set(range(50, 65, 2))
        covered = torch_placed_heights.intersection(required_levels)
        if len(covered) >= 7:  # 至少7层有火把
            await bot.chat("竖井照明充足，任务完成！")
            return True
        else:
            await bot.chat(f"警告：照明不足，仅在 {sorted(covered)} 放置了火把，请手动补充。")
            return False
    else:
        await bot.chat("未能到达Y=50。")
        return False