# -*- coding: utf-8 -*-
# Generated by MaiAgent after successful task execution

# main function
async def digSafeMineShaftToY12(bot):
    import asyncio
    
    await bot.chat("开始挖掘通往地下的安全矿井，目标深度Y=12...")

    # 检查是否持有石镐
    inventory = await bot.inventory
    stone_pickaxe = None
    for item in inventory:
        if item.name == "stone_pickaxe":
            stone_pickaxe = item
            break
    if not stone_pickaxe:
        await bot.chat("错误：没有石镐，无法挖掘石头类方块！")
        return False

    target_y = 12

    while True:
        current_pos = await bot.position
        x, y, z = current_pos.x, current_pos.y, current_pos.z

        # 检查是否已到达目标深度
        if y <= target_y:
            await bot.chat(f"成功到达Y={y}，安全矿井已打通！")
            return True

        # 计算下方和头顶位置
        below_pos = (x, y - 1, z)
        head_pos = (x, y + 1, z)

        # 检查头顶是否有方块，防止窒息
        block_above = await bot.get_block(head_pos[0], head_pos[1], head_pos[2])
        if block_above and block_above.block_type != "air":
            success, _ = await bot.mine_block(head_pos[0], head_pos[1], head_pos[2], digOnly=False)
            if not success:
                await bot.chat(f"无法清除头顶方块 {block_above.block_type}，稍后重试...")
                await asyncio.sleep(0.5)
                continue

        # 获取下方方块
        block_below = await bot.get_block(below_pos[0], below_pos[1], below_pos[2])
        if block_below is None:
            await bot.chat("无法获取下方方块信息，跳过...")
            await asyncio.sleep(0.5)
            continue

        if block_below.block_type == "air":
            # 下方是空的，需要放置cobblestone
            inventory = await bot.inventory
            cobblestone_item = None
            for item in inventory:
                if item.name == "cobblestone" and item.count > 0:
                    cobblestone_item = item
                    break
            if not cobblestone_item:
                await bot.chat("警告：背包中没有cobblestone，无法支撑结构！")
                return False

            placed, _ = await bot.place_block("cobblestone", below_pos[0], below_pos[1], below_pos[2])
            if not placed:
                await bot.chat(f"无法在{below_pos}放置cobblestone，可能被占用。")
                await asyncio.sleep(0.5)
                continue

            # 移动到新放置的方块上
            move_success, msg = await bot.move(below_pos[0], below_pos[1], below_pos[2])
            if not move_success:
                await bot.chat(f"无法移动到新放置的方块 {below_pos}：{msg}，重试...")
                await asyncio.sleep(0.5)
                continue

        elif block_below.block_type == "bedrock":
            await bot.chat("遇到bedrock，无法继续向下挖掘。")
            return False

        else:
            # 下方有方块，尝试挖掘
            success, can_dig = await bot.mine_block(below_pos[0], below_pos[1], below_pos[2], digOnly=False)
            if not success:
                await bot.chat(f"无法挖掘{block_below.block_type}，重试...")
                await asyncio.sleep(0.5)
                continue

            # 等待短暂时间让方块状态更新
            await asyncio.sleep(0.3)

            # 尝试移动到挖掘后的方块位置
            move_success, msg = await bot.move(below_pos[0], below_pos[1], below_pos[2])
            if not move_success:
                await bot.chat(f"挖掘成功但无法移动到{below_pos}：{msg}，重试...")
                await asyncio.sleep(0.5)
                continue

        # 每下降10层报告一次
        new_pos = await bot.position
        new_y = new_pos.y
        if new_y <= 70 and new_y % 10 == 0:
            await bot.chat(f"已下降至Y={new_y}，继续向Y=12前进...")

        # 小延迟避免操作过快
        await asyncio.sleep(0.3)